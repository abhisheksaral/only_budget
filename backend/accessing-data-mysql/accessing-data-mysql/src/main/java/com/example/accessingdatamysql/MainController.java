package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UsersRepository userRepository;
  
  @Autowired
  private ExpensesRepository expenseRepository;

  @PostMapping(path="/addUser") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String user_name
      , @RequestParam String picture
      , @RequestParam Double income
      ) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Users n = new Users();
    n.setuser_name(user_name);
    n.setPicture(picture);
    n.setIncome(income);
    userRepository.save(n);
    return "SavedUsers";
  }

  @GetMapping(path="/allUsers")
  public @ResponseBody Iterable<Users> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }
  
  
  //Expenses
  @PostMapping(path="/addExpense") // Map ONLY POST Requests
  public @ResponseBody String addNewExpense (@RequestParam Long user_id
      , @RequestParam String title
      , @RequestParam String category
      , @RequestParam Double amount
      , @RequestParam String dt
      ) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Expenses e = new Expenses();
    e.setUser_id(user_id);
    e.setTitle(title);
    e.setCategory(category);
    e.setAmount(amount);
    e.setDt(dt);
    expenseRepository.save(e);
    return "SavedExpenses";
  }

  @GetMapping(path="/allExpenses")
  public @ResponseBody Iterable<Expenses> getAllExpenses() {
    // This returns a JSON or XML with the users
    return expenseRepository.findAll();
  }
}